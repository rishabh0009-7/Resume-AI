// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resumes             Resume[]
  templates           ResumeTemplate[]
  aiGenerationHistory AIGenerationHistory[]

  @@map("users")
}

model Resume {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId     String
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId String?
  template   ResumeTemplate? @relation(fields: [templateId], references: [id])

  sections            ResumeSection[]
  aiGenerationHistory AIGenerationHistory[]

  @@map("resumes")
}

model ResumeSection {
  id        String   @id @default(cuid())
  type      String // PERSONAL_INFO, SUMMARY, EXPERIENCE, EDUCATION, SKILLS, etc.
  title     String
  content   Json
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("resume_sections")
}

model ResumeTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  structure   Json // Template structure and layout
  styling     Json // CSS styles and theme
  isPremium   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  resumes Resume[]

  @@map("resume_templates")
}

model AIGenerationHistory {
  id        String   @id @default(cuid())
  prompt    String
  response  String
  model     String   @default("gemini-pro")
  status    String // SUCCESS, FAILED
  createdAt DateTime @default(now())

  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeId String?
  resume   Resume? @relation(fields: [resumeId], references: [id], onDelete: SetNull)

  @@map("ai_generation_history")
}
